// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sergicanet9/go-microservices-demo/task-manager-api/core/models"
	mock "github.com/stretchr/testify/mock"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userID, task
func (_m *TaskService) Create(ctx context.Context, userID string, task models.CreateTaskReq) (models.CreateTaskResp, error) {
	ret := _m.Called(ctx, userID, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.CreateTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.CreateTaskReq) (models.CreateTaskResp, error)); ok {
		return rf(ctx, userID, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.CreateTaskReq) models.CreateTaskResp); ok {
		r0 = rf(ctx, userID, task)
	} else {
		r0 = ret.Get(0).(models.CreateTaskResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.CreateTaskReq) error); ok {
		r1 = rf(ctx, userID, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, userID, taskID
func (_m *TaskService) Delete(ctx context.Context, userID string, taskID string) error {
	ret := _m.Called(ctx, userID, taskID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *TaskService) GetByUserID(ctx context.Context, userID string) ([]models.GetTaskResp, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []models.GetTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.GetTaskResp, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.GetTaskResp); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetTaskResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskService creates a new instance of TaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskService {
	mock := &TaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
