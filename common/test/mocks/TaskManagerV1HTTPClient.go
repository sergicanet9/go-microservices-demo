// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sergicanet9/go-microservices-demo/task-manager-api/core/models"
	mock "github.com/stretchr/testify/mock"
)

// TaskManagerV1HTTPClient is an autogenerated mock type for the TaskManagerV1HTTPClient type
type TaskManagerV1HTTPClient struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TaskManagerV1HTTPClient) CreateTask(ctx context.Context, task models.CreateTaskReq) (models.CreateTaskResp, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 models.CreateTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateTaskReq) (models.CreateTaskResp, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateTaskReq) models.CreateTaskResp); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(models.CreateTaskResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateTaskReq) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, userID, taskID
func (_m *TaskManagerV1HTTPClient) DeleteTask(ctx context.Context, userID string, taskID string) error {
	ret := _m.Called(ctx, userID, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTasks provides a mock function with given fields: ctx, userID
func (_m *TaskManagerV1HTTPClient) GetTasks(ctx context.Context, userID string) ([]models.GetTaskResp, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []models.GetTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.GetTaskResp, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.GetTaskResp); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetTaskResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields: ctx
func (_m *TaskManagerV1HTTPClient) Health(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskManagerV1HTTPClient creates a new instance of TaskManagerV1HTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskManagerV1HTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskManagerV1HTTPClient {
	mock := &TaskManagerV1HTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
